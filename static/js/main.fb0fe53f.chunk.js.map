{"version":3,"sources":["appConstants/index.ts","store/login.ts","store/taskList.ts","store/taskEdit.ts","components/Header/index.tsx","components/TaskCard/index.tsx","components/TaskTable/index.tsx","components/TaskPagination/index.tsx","store/alert.ts","apiLogic/index.ts","components/DialogTransition/styles.ts","components/DialogTransition/index.tsx","components/LoginForm/index.tsx","components/AlertPopup/index.tsx","components/TaskForm/index.tsx","App.tsx","serviceWorker.ts","store/rootReducer.ts","store/index.ts","index.tsx"],"names":["ESortFields","ESortDirection","EServerStatus","ETaskStatus","Sorting","label","value","ID","USERNAME","EMAIL","STATUS","loginState","createSlice","name","initialState","isAuthenticated","authKey","windowOpen","reducers","setKey","state","payload","localStorage","setItem","resetKey","restoreAuthentication","localStorageToken","getItem","openLoginWindow","closeLoginWindow","actions","taskList","page","totalPages","sorting","direction","ASC","shouldUpdate","taskListState","setTaskList","setSorting","setDirection","DESC","setPage","updatePage","changedRecordIndex","findIndex","task","id","newArray","map","text","isTextChanged","setTotalPages","taskEditState","taskData","createTask","editTask","writeTask","closeTaskEditWindow","reset","useStyles","makeStyles","root","display","justifyContent","marginRight","whiteColor","color","select","width","button","filterBlock","gridGap","GreenButton","withStyles","backgroundColor","green","Button","Header","dispatch","useDispatch","useSelector","loginReducer","taskListReducer","styles","AppBar","position","Toolbar","className","InputLabel","htmlFor","clsx","Select","labelId","onChange","event","target","element","MenuItem","key","FormControlLabel","control","checked","onClick","marginTop","cardHeader","height","boxSizing","avatar","red","whiteSpace","overflowY","TaskCard","props","data","username","email","status","Card","variant","CardHeader","Avatar","aria-label","toUpperCase","action","style","blue","title","subheader","CardContent","Typography","gutterBottom","component","margin","TaskTable","memoizedValue","useMemo","TaskPagination","Pagination","count","size","newPage","showFirstButton","showLastButton","alertState","isError","showAlert","message","hideAlert","process","REACT_APP_DEVELOPER_NAME","REACT_APP_API_URL","errorMessage","getTasksPage","a","getUrl","sortField","sortDirection","fetch","cache","response","ok","json","result","OK","tasks","totalTaskCount","total_task_count","addTask","formData","FormData","append","method","body","authentication","password","token","taskStatus","theme","content","flexDirection","dialog","typography","padding","spacing","marginBottom","alignItems","closeButton","right","top","completeIcon","formContainer","DialogTransition","React","forwardRef","ref","Slide","schema","Joi","object","string","required","defaultValues","LoginForm","useForm","resolver","joiResolver","register","handleSubmit","errors","handleExit","onSubmit","Dialog","fullScreen","onClose","open","TransitionComponent","DialogTitle","disableTypography","IconButton","DialogContent","TextField","error","Boolean","helperText","inputRef","type","DialogActions","container","left","AlertPopup","alertReducer","useEffect","timer","setTimeout","clearTimeout","Box","zIndex","Alert","severity","AlertTitle","tlds","allow","TaskForm","taskEditReducer","useState","OPEN","setTaskStatus","InputProps","readOnly","multiline","rows","CLOSED","taskContainer","maxWidth","App","loginWindowOpen","taskEditWindowOpen","errorWindowOpen","pages","Math","ceil","updateTaskList","window","location","hostname","match","store","configureStore","reducer","rootReducer","devTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.fb0fe53f.chunk.js","sourcesContent":["export enum ESortFields {\n  ID = \"id\",\n  USERNAME = \"username\",\n  EMAIL = \"email\",\n  STATUS = \"status\",\n}\n\nexport const Sorting = [\n  { label: \"Id\", value: ESortFields.ID },\n  { label: \"User\", value: ESortFields.USERNAME },\n  { label: \"Email\", value: ESortFields.EMAIL },\n  { label: \"Status\", value: ESortFields.STATUS },\n];\n\nexport enum ESortDirection {\n  ASC = \"asc\",\n  DESC = \"desc\",\n}\n\nexport enum EServerStatus {\n  OK = \"ok\",\n  ERROR = \"error\",\n}\n\nexport enum ETaskStatus {\n  OPEN = 0,\n  CLOSED = 10,\n}\n\nexport const MAX_TASKS_PER_PAGE = 3;\n\nexport const AUTH_KEY = \"token\";\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { AUTH_KEY } from \"../appConstants\";\n\ninterface ILoginState {\n  isAuthenticated: boolean;\n  authKey: string;\n  windowOpen: boolean;\n}\n\nconst initialState: ILoginState = {\n  isAuthenticated: false,\n  authKey: \"\",\n  windowOpen: false,\n};\n\nconst loginState = createSlice({\n  name: \"loginKey\",\n  initialState,\n  reducers: {\n    setKey: (state, { payload }: PayloadAction<string>) => {\n      state.authKey = payload;\n      state.isAuthenticated = true;\n      localStorage.setItem(AUTH_KEY, payload);\n    },\n    resetKey: (state) => {\n      state.authKey = \"\";\n      state.isAuthenticated = false;\n      localStorage.setItem(AUTH_KEY, \"\");\n    },\n    restoreAuthentication: (state) => {\n      const localStorageToken = localStorage.getItem(AUTH_KEY);\n      if (localStorageToken) {\n        state.authKey = localStorageToken;\n        state.isAuthenticated = true;\n      }\n    },\n    openLoginWindow: (state) => {\n      state.windowOpen = true;\n    },\n    closeLoginWindow: (state) => {\n      state.windowOpen = false;\n    },\n  },\n});\n\nexport default loginState.reducer;\n\nexport const {\n  setKey,\n  resetKey,\n  restoreAuthentication,\n  openLoginWindow,\n  closeLoginWindow,\n} = loginState.actions;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ITask } from \"../appTypes\";\nimport { ESortDirection, ESortFields } from \"../appConstants\";\n\ninterface ITaskList {\n  taskList: ITask[];\n  page: number;\n  totalPages: number;\n  sorting: ESortFields;\n  direction: ESortDirection;\n  shouldUpdate: boolean;\n}\n\nconst FIRST_PAGE = 1;\n\nconst initialState: ITaskList = {\n  taskList: [],\n  page: FIRST_PAGE,\n  totalPages: FIRST_PAGE,\n  sorting: ESortFields.ID,\n  direction: ESortDirection.ASC,\n  shouldUpdate: false,\n};\n\nconst taskListState = createSlice({\n  name: \"taskList\",\n  initialState,\n  reducers: {\n    setTaskList: (state, { payload }: PayloadAction<ITask[]>) => {\n      state.taskList = payload;\n    },\n    setSorting: (state, { payload }: PayloadAction<ESortFields>) => {\n      state.sorting = payload;\n    },\n    setDirection: (state, { payload }: PayloadAction<boolean>) => {\n      state.direction = payload ? ESortDirection.ASC : ESortDirection.DESC;\n    },\n    setPage: (state, { payload }: PayloadAction<number>) => {\n      if (state.totalPages < payload) {\n        state.page = state.totalPages;\n      } else if (payload < FIRST_PAGE) {\n        state.page = FIRST_PAGE;\n      } else {\n        state.page = payload;\n      }\n    },\n    updatePage: (state, { payload }: PayloadAction<ITask>) => {\n      const changedRecordIndex = state.taskList.findIndex(\n        (task) => task.id === payload.id\n      );\n      if (changedRecordIndex >= 0) {\n        const newArray = state.taskList.map((task) => task);\n        const changedTask = state.taskList[changedRecordIndex];\n        if (changedTask.text !== payload.text) {\n          payload.isTextChanged = true;\n        }\n        newArray[changedRecordIndex] = payload;\n        state.taskList = newArray;\n      }\n    },\n    setTotalPages: (state, { payload }: PayloadAction<number>) => {\n      state.totalPages = payload;\n    },\n  },\n});\n\nexport default taskListState.reducer;\n\nexport const {\n  setTaskList,\n  setSorting,\n  setDirection,\n  setPage,\n  updatePage,\n  setTotalPages,\n} = taskListState.actions;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ITask } from \"../appTypes\";\n\ninterface ITaskEditState {\n  taskData: ITask | null;\n  windowOpen: boolean;\n  createTask: boolean;\n}\n\nconst initialState: ITaskEditState = {\n  taskData: null,\n  windowOpen: false,\n  createTask: false,\n};\n\nconst taskEditState = createSlice({\n  name: \"taskEdit\",\n  initialState,\n  reducers: {\n    editTask: (state, { payload }: PayloadAction<ITask>) => {\n      state.taskData = payload;\n      state.windowOpen = true;\n    },\n    createTask: (state) => {\n      state.taskData = null;\n      state.windowOpen = true;\n    },\n    writeTask: (state) => {\n      state.createTask = true;\n    },\n    closeTaskEditWindow: (state) => {\n      state.windowOpen = false;\n    },\n    reset: (state) => {\n      state.taskData = null;\n      state.windowOpen = false;\n      state.createTask = false;\n    },\n  },\n});\n\nexport default taskEditState.reducer;\n\nexport const {\n  editTask,\n  createTask,\n  writeTask,\n  closeTaskEditWindow,\n  reset,\n} = taskEditState.actions;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport CheckBox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport clsx from \"clsx\";\nimport { withStyles } from \"@material-ui/core\";\nimport { green } from \"@material-ui/core/colors\";\n\nimport { ESortDirection, ESortFields, Sorting } from \"../../appConstants\";\nimport { AppState } from \"../../store\";\nimport { resetKey, openLoginWindow } from \"../../store/login\";\nimport { setSorting, setDirection } from \"../../store/taskList\";\nimport { createTask } from \"../../store/taskEdit\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  label: {\n    marginRight: 5,\n  },\n  whiteColor: {\n    color: \"#fff\",\n  },\n  select: {\n    width: 80,\n  },\n  button: {\n    width: 80,\n  },\n  filterBlock: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    gridGap: 50,\n  },\n}));\n\nconst GreenButton = withStyles(() => ({\n  root: {\n    color: \"#fff\",\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[700],\n    },\n  },\n}))(Button);\n\nconst Header: React.FC = () => {\n  const dispatch = useDispatch();\n  const { authKey } = useSelector((state: AppState) => state.loginReducer);\n  const { sorting, direction } = useSelector(\n    (state: AppState) => state.taskListReducer\n  );\n  const styles = useStyles();\n\n  const handleSelectChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const value = event.target.value as ESortFields;\n    dispatch(setSorting(value));\n  };\n\n  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setDirection(event.target.checked));\n  };\n\n  const creteTask = () => {\n    dispatch(createTask());\n  };\n\n  const onLogInOut = () => {\n    if (authKey) {\n      // logout\n      dispatch(resetKey());\n    } else {\n      // login\n      dispatch(openLoginWindow());\n    }\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar className={styles.root}>\n        <div className={styles.filterBlock}>\n          <div>\n            <InputLabel\n              htmlFor=\"sorting-label\"\n              className={clsx(styles.label, styles.whiteColor)}\n            >\n              Sort by\n            </InputLabel>\n            <Select\n              labelId=\"sorting-label\"\n              value={sorting}\n              onChange={handleSelectChange}\n              className={clsx(styles.select, styles.whiteColor)}\n            >\n              {Sorting.map((element) => (\n                <MenuItem value={element.value} key={element.value}>\n                  {element.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </div>\n          <FormControlLabel\n            control={\n              <CheckBox\n                checked={direction === ESortDirection.ASC}\n                onChange={handleCheckboxChange}\n                name=\"checkbox\"\n              />\n            }\n            label=\"Asc/Desc\"\n          />\n        </div>\n        <GreenButton onClick={creteTask}>Add task</GreenButton>\n        <Button\n          className={clsx(styles.whiteColor, styles.button)}\n          onClick={onLogInOut}\n        >\n          {authKey ? \"LogOut\" : \"LogIn\"}\n        </Button>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\";\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { blue, green, red } from \"@material-ui/core/colors\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { ITask } from \"../../appTypes\";\nimport { editTask } from \"../../store/taskEdit\";\nimport { AppState } from \"../../store\";\n\ninterface ITaskCard {\n  data: ITask;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    marginTop: 10,\n  },\n  cardHeader: {\n    height: 65,\n    boxSizing: \"border-box\",\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n  text: {\n    whiteSpace: \"pre-wrap\",\n    height: 90,\n    overflowY: \"auto\",\n  },\n}));\n\nconst TaskCard: React.FC<ITaskCard> = (props: ITaskCard) => {\n  const dispatch = useDispatch();\n  const { data } = props;\n  const { id, username, email, text, status, isTextChanged } = data;\n  const styles = useStyles();\n  const { isAuthenticated } = useSelector(\n    (state: AppState) => state.loginReducer\n  );\n\n  const onClick = () => {\n    if (isAuthenticated)\n      dispatch(editTask({ id, text, email, status, username }));\n  };\n\n  return (\n    <Card onClick={onClick} variant=\"outlined\" className={styles.root}>\n      <CardHeader\n        className={styles.cardHeader}\n        avatar={\n          <Avatar aria-label=\"user\" className={styles.avatar}>\n            {username[0].toUpperCase()}\n          </Avatar>\n        }\n        action={\n          <div>\n            {status ? <DoneAllIcon style={{ color: green[500] }} /> : null}\n            {isTextChanged ? (\n              <AssignmentIcon style={{ color: blue[500] }} />\n            ) : null}\n          </div>\n        }\n        title={username}\n        subheader={email}\n      />\n      <CardContent>\n        <Typography\n          variant=\"body1\"\n          color=\"textPrimary\"\n          gutterBottom\n          component=\"p\"\n          className={styles.text}\n        >\n          {text}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TaskCard;\n","import React, { useMemo } from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nimport { useSelector } from \"react-redux\";\nimport TaskCard from \"../TaskCard\";\nimport { AppState } from \"../../store\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    margin: 10,\n  },\n}));\n\nconst TaskTable: React.FC = () => {\n  const { taskList } = useSelector((state: AppState) => state.taskListReducer);\n  const styles = useStyles();\n\n  const memoizedValue = useMemo(\n    () =>\n      taskList.map((taskData) => (\n        <TaskCard data={taskData} key={taskData.id} />\n      )),\n    [taskList]\n  );\n\n  return (\n    <div aria-label=\"task table\" className={styles.root}>\n      {memoizedValue}\n    </div>\n  );\n};\n\nexport default TaskTable;\n","import React, { ChangeEvent } from \"react\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { AppState } from \"../../store\";\nimport { setPage } from \"../../store/taskList\";\n\nconst TaskPagination: React.FC = () => {\n  const dispatch = useDispatch();\n  const { page, totalPages } = useSelector(\n    (state: AppState) => state.taskListReducer\n  );\n\n  const handleChangePage = (\n    event: ChangeEvent<unknown> | null,\n    newPage: number\n  ) => {\n    dispatch(setPage(newPage));\n  };\n\n  if (totalPages > 1)\n    return (\n      <Pagination\n        count={totalPages}\n        page={page}\n        size=\"small\"\n        onChange={handleChangePage}\n        showFirstButton\n        showLastButton\n      />\n    );\n  return null;\n};\n\nexport default TaskPagination;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface IErrorState {\n  message?: string;\n  isError: boolean;\n  windowOpen: boolean;\n}\n\nconst initialState: IErrorState = {\n  isError: false,\n  windowOpen: false,\n};\n\ninterface IPayload {\n  message?: string;\n  isError: boolean;\n}\n\nconst alertState = createSlice({\n  name: \"alert\",\n  initialState,\n  reducers: {\n    showAlert: (state, { payload }: PayloadAction<IPayload>) => {\n      if (payload.message) state.message = payload.message;\n      state.isError = payload.isError;\n      state.windowOpen = true;\n    },\n    hideAlert: (state) => {\n      state.windowOpen = false;\n    },\n  },\n});\n\nexport default alertState.reducer;\n\nexport const { showAlert, hideAlert } = alertState.actions;\n","import { EServerStatus, ESortDirection, ESortFields } from \"../appConstants\";\nimport {\n  IEditTask,\n  IEditTaskResult,\n  IError,\n  TGetTasksPageResult,\n  INewTask,\n  TAuthenticationResult,\n} from \"../appTypes\";\n\ninterface IGetTasksPage {\n  page: number;\n  sorting: {\n    sortField: ESortFields;\n    sortDirection: ESortDirection;\n  };\n}\n\ntype TGetTasksPage = (data: IGetTasksPage) => Promise<TGetTasksPageResult>;\n\nconst { REACT_APP_DEVELOPER_NAME, REACT_APP_API_URL } = process.env;\nconst errorMessage: IError = {\n  errorMessage: \"Something goes wrong\",\n};\n\nexport const getTasksPage: TGetTasksPage = async (data) => {\n  const { page, sorting } = data;\n  let getUrl = `${REACT_APP_API_URL}/?developer=${REACT_APP_DEVELOPER_NAME}&page=${page}`;\n  getUrl = `${getUrl}&sort_field=${sorting.sortField}&sort_direction=${sorting.sortDirection}`;\n\n  try {\n    const response = await fetch(getUrl, { cache: \"reload\" });\n\n    if (response.ok) {\n      const result = await response.json();\n      const { status, message } = result;\n      if (status === EServerStatus.OK) {\n        return {\n          data: {\n            tasks: message.tasks,\n            totalTaskCount: message.total_task_count,\n          },\n        };\n      }\n      return { errorMessage: message || errorMessage.errorMessage };\n    }\n    return errorMessage;\n  } catch (e) {\n    return errorMessage;\n  }\n};\n\ntype TAddTask = (data: INewTask) => Promise<boolean>;\n\nexport const addTask: TAddTask = async (data) => {\n  const { username, email, text } = data;\n  const formData = new FormData();\n  formData.append(\"username\", username);\n  formData.append(\"email\", email);\n  formData.append(\"text\", text);\n\n  try {\n    const response = await fetch(\n      `${REACT_APP_API_URL}/create/?developer=${REACT_APP_DEVELOPER_NAME}`,\n      {\n        method: \"POST\",\n        body: formData,\n      }\n    );\n\n    if (response.ok) {\n      const result = await response.json();\n      const { status } = result;\n      return status === EServerStatus.OK;\n    }\n    return false;\n  } catch (e) {\n    return false;\n  }\n};\n\ntype TAuthentication = (\n  username: string,\n  password: string\n) => Promise<TAuthenticationResult>;\n\nexport const authentication: TAuthentication = async (username, password) => {\n  const formData = new FormData();\n  formData.append(\"username\", username);\n  formData.append(\"password\", password);\n\n  try {\n    const response = await fetch(\n      `${REACT_APP_API_URL}/login?developer=${REACT_APP_DEVELOPER_NAME}`,\n      {\n        method: \"POST\",\n        body: formData,\n      }\n    );\n\n    if (response.ok) {\n      const result = await response.json();\n      const { status, message } = result;\n\n      if (status === EServerStatus.OK) {\n        return { token: message.token };\n      }\n      return { errorMessage: message.password };\n    }\n    return errorMessage;\n  } catch (e) {\n    return errorMessage;\n  }\n};\n\ntype TEditTask = (data: IEditTask) => Promise<IEditTaskResult>;\n\nexport const editTask: TEditTask = async (data) => {\n  const { id, text, taskStatus, token } = data;\n  const formData = new FormData();\n  formData.append(\"token\", token);\n  formData.append(\"text\", text);\n  formData.append(\"status\", `${taskStatus}`);\n\n  try {\n    const response = await fetch(\n      `${REACT_APP_API_URL}/edit/${id}?developer=${REACT_APP_DEVELOPER_NAME}`,\n      {\n        method: \"POST\",\n        body: formData,\n      }\n    );\n    if (response.ok) {\n      const result = await response.json();\n      const { status, message } = result;\n      if (status === EServerStatus.OK) {\n        return {\n          status: true,\n        };\n      }\n      if (message.token) {\n        return { status: false, message: message.token };\n      }\n    }\n    return {\n      status: false,\n    };\n  } catch (e) {\n    return {\n      status: false,\n    };\n  }\n};\n","import { makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  content: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gridGap: 15,\n  },\n  dialog: {\n    \"& .MuiPaper-root\": {\n      backgroundColor: \"#ccc\",\n    },\n  },\n  typography: {\n    color: \"#606079\",\n  },\n  title: {\n    margin: 0,\n    display: \"flex\",\n    padding: theme.spacing(2),\n  },\n  action: {\n    justifyContent: \"space-around\",\n    marginBottom: 10,\n    alignItems: \"baseline\",\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: \"#000\",\n  },\n  completeIcon: {\n    padding: 0,\n  },\n  formContainer: {\n    width: 400,\n    margin: \"auto\",\n  },\n}));\n\nexport default useStyles;\n","import React from \"react\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\nimport Slide from \"@material-ui/core/Slide\";\n\nconst DialogTransition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>\n) {\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default DialogTransition;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { joiResolver } from \"@hookform/resolvers/joi\";\nimport Joi from \"joi\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport { Button } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport useStyles from \"../DialogTransition/styles\";\nimport DialogTransition from \"../DialogTransition\";\nimport { AppState } from \"../../store\";\nimport { closeLoginWindow, setKey } from \"../../store/login\";\nimport { showAlert } from \"../../store/alert\";\nimport { authentication } from \"../../apiLogic\";\n\nconst schema = Joi.object({\n  username: Joi.string().required(),\n  password: Joi.string().required(),\n});\n\nconst defaultValues = {\n  username: \"\",\n  password: \"\",\n};\n\nconst helperText = \"Должно быть заполненно\";\n\nconst LoginForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const { windowOpen } = useSelector((state: AppState) => state.loginReducer);\n  const styles = useStyles();\n\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues,\n    resolver: joiResolver(schema),\n  });\n\n  const handleExit = () => {\n    dispatch(closeLoginWindow());\n  };\n\n  const onSubmit = async (data: typeof defaultValues) => {\n    const result = await authentication(data.username, data.password);\n    if (\"token\" in result) {\n      dispatch(setKey(result.token));\n      dispatch(closeLoginWindow());\n      dispatch(showAlert({ message: \"Hello Admin\", isError: false }));\n    } else {\n      dispatch(showAlert({ message: result.errorMessage, isError: true }));\n    }\n  };\n\n  return (\n    <Dialog\n      fullScreen\n      onClose={handleExit}\n      open={windowOpen}\n      className={styles.dialog}\n      TransitionComponent={DialogTransition}\n    >\n      <div className={styles.formContainer}>\n        <DialogTitle disableTypography className={styles.title}>\n          <Typography variant=\"h6\" className={styles.typography}>\n            Login Form\n          </Typography>\n\n          <IconButton\n            aria-label=\"close\"\n            className={styles.closeButton}\n            onClick={handleExit}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <DialogContent className={styles.content}>\n            <TextField\n              name=\"username\"\n              label=\"Login\"\n              error={Boolean(errors.username)}\n              helperText={Boolean(errors.username) && helperText}\n              inputRef={register({ required: true })}\n            />\n            <TextField\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              error={Boolean(errors.password)}\n              helperText={Boolean(errors.password) && helperText}\n              inputRef={register({ required: true })}\n            />\n          </DialogContent>\n          <DialogActions className={styles.action}>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              authenticate\n            </Button>\n          </DialogActions>\n        </form>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default LoginForm;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from \"react\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles, Theme } from \"@material-ui/core\";\n\nimport Box from \"@material-ui/core/Box\";\nimport { AppState } from \"../../store\";\nimport { hideAlert } from \"../../store/alert\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    width: 500,\n    margin: \"auto\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nconst AlertPopup: React.FC = () => {\n  const dispatch = useDispatch();\n  const { isError, message } = useSelector(\n    (state: AppState) => state.alertReducer\n  );\n  const styles = useStyles();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      dispatch(hideAlert());\n    }, 2000);\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Box component=\"div\" className={styles.container} zIndex=\"tooltip\">\n      {isError ? (\n        <Alert severity=\"error\">\n          <AlertTitle>Error</AlertTitle>\n          {message}\n        </Alert>\n      ) : (\n        <Alert severity=\"success\">\n          <AlertTitle>Success</AlertTitle>\n          {message}\n        </Alert>\n      )}\n    </Box>\n  );\n};\n\nexport default AlertPopup;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Joi from \"joi\";\nimport { useForm } from \"react-hook-form\";\nimport { joiResolver } from \"@hookform/resolvers/joi\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\";\nimport { green } from \"@material-ui/core/colors\";\n\nimport DialogTransition from \"../DialogTransition\";\nimport useStyles from \"../DialogTransition/styles\";\nimport { AppState } from \"../../store\";\nimport { AUTH_KEY, ETaskStatus } from \"../../appConstants\";\nimport { addTask, editTask } from \"../../apiLogic\";\nimport { closeTaskEditWindow } from \"../../store/taskEdit\";\nimport { showAlert } from \"../../store/alert\";\nimport { updatePage } from \"../../store/taskList\";\nimport { openLoginWindow, resetKey } from \"../../store/login\";\n\nconst schema = Joi.object({\n  email: Joi.string()\n    .email({ tlds: { allow: false } })\n    .required(),\n  username: Joi.string().required(),\n  text: Joi.string().required(),\n});\n\nconst TaskForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const { windowOpen, taskData } = useSelector(\n    (state: AppState) => state.taskEditReducer\n  );\n\n  const styles = useStyles();\n\n  let defaultValues = {\n    username: \"\",\n    email: \"\",\n    text: \"\",\n  };\n\n  if (taskData) {\n    defaultValues = {\n      username: taskData.username,\n      email: taskData.email,\n      text: taskData.text,\n    };\n  }\n\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues,\n    resolver: joiResolver(schema),\n  });\n\n  const onClose = () => {\n    dispatch(closeTaskEditWindow());\n  };\n\n  const [taskStatus, setTaskStatus] = useState(\n    taskData?.status || ETaskStatus.OPEN\n  );\n\n  const handleStatus = () => {\n    if (taskStatus) {\n      setTaskStatus(ETaskStatus.OPEN);\n    } else {\n      setTaskStatus(ETaskStatus.CLOSED);\n    }\n  };\n\n  const onSubmit = async (data: typeof defaultValues) => {\n    const authKey = localStorage.getItem(AUTH_KEY);\n    if (!taskData) {\n      // new task\n      const result = await addTask(data);\n      if (!result) {\n        dispatch(showAlert({ isError: true }));\n      }\n    } else {\n      if (authKey) {\n        // edit existed if have token\n        const result = await editTask({\n          id: taskData.id,\n          text: data.text,\n          token: authKey,\n          taskStatus,\n        });\n        if (!result.status) {\n          dispatch(showAlert({ message: result.message, isError: true }));\n          return;\n        }\n      } else {\n        // have no token\n        dispatch(showAlert({ message: \"You have no rights!\", isError: true }));\n        onClose();\n        dispatch(resetKey());\n        dispatch(openLoginWindow());\n        return;\n      }\n      dispatch(showAlert({ message: \"Well done!\", isError: false }));\n      dispatch(\n        updatePage({ ...taskData, text: data.text, status: taskStatus })\n      );\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog\n      fullScreen\n      onClose={onClose}\n      open={windowOpen}\n      className={styles.dialog}\n      TransitionComponent={DialogTransition}\n    >\n      <div className={styles.formContainer}>\n        <DialogTitle disableTypography className={styles.title}>\n          <Typography variant=\"h6\" className={styles.typography}>\n            {!taskData ? \"Create Task\" : \"Edit Task\"}\n          </Typography>\n          {taskStatus ? <DoneAllIcon style={{ color: green[500] }} /> : null}\n\n          <IconButton\n            aria-label=\"close\"\n            className={styles.closeButton}\n            onClick={onClose}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <DialogContent className={styles.content}>\n            <TextField\n              label=\"User Name\"\n              variant=\"outlined\"\n              name=\"username\"\n              error={Boolean(errors.username)}\n              helperText={Boolean(errors.username) && \"Username should be set\"}\n              InputProps={{ readOnly: Boolean(taskData) }}\n              inputRef={register({ required: true })}\n            />\n            <TextField\n              label=\"Email\"\n              variant=\"outlined\"\n              name=\"email\"\n              error={Boolean(errors.email)}\n              helperText={\n                Boolean(errors.email) && \"Email should be set in correct format\"\n              }\n              InputProps={{ readOnly: Boolean(taskData) }}\n              inputRef={register({ required: true })}\n            />\n            <TextField\n              label=\"Task Text\"\n              variant=\"outlined\"\n              multiline\n              rows={4}\n              name=\"text\"\n              error={Boolean(errors.text)}\n              helperText={Boolean(errors.text) && \"Should write task\"}\n              inputRef={register({ required: true })}\n            />\n          </DialogContent>\n          <DialogActions className={styles.action}>\n            {!taskData ? null : (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleStatus}\n              >\n                Change Status\n              </Button>\n            )}\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              {!taskData ? \"Create\" : \"Update\"}\n            </Button>\n          </DialogActions>\n        </form>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default TaskForm;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nimport Header from \"./components/Header\";\nimport TaskTable from \"./components/TaskTable\";\nimport TaskPagination from \"./components/TaskPagination\";\nimport { AppState } from \"./store\";\nimport { showAlert } from \"./store/alert\";\nimport { setTaskList, setTotalPages } from \"./store/taskList\";\nimport { restoreAuthentication } from \"./store/login\";\nimport { getTasksPage } from \"./apiLogic\";\nimport { MAX_TASKS_PER_PAGE } from \"./appConstants\";\nimport LoginForm from \"./components/LoginForm\";\nimport AlertPopup from \"./components/AlertPopup\";\nimport TaskForm from \"./components/TaskForm\";\n\nconst useStyles = makeStyles(() => ({\n  taskContainer: {\n    margin: \"auto\",\n    maxWidth: 800,\n  },\n}));\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const { page, sorting, direction, totalPages } = useSelector(\n    (state: AppState) => state.taskListReducer\n  );\n  const { windowOpen: loginWindowOpen } = useSelector(\n    (state: AppState) => state.loginReducer\n  );\n  const { windowOpen: taskEditWindowOpen } = useSelector(\n    (state: AppState) => state.taskEditReducer\n  );\n  const { windowOpen: errorWindowOpen } = useSelector(\n    (state: AppState) => state.alertReducer\n  );\n\n  const styles = useStyles();\n\n  useEffect(() => {\n    dispatch(restoreAuthentication());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const updateTaskList = async () => {\n      try {\n        const result = await getTasksPage({\n          page,\n          sorting: {\n            sortField: sorting,\n            sortDirection: direction,\n          },\n        });\n\n        if (\"errorMessage\" in result) {\n          dispatch(showAlert({ message: result.errorMessage, isError: true }));\n          return;\n        }\n\n        const { tasks, totalTaskCount } = result.data;\n        dispatch(setTaskList(tasks));\n        const pages = Math.ceil(totalTaskCount / MAX_TASKS_PER_PAGE);\n        if (totalPages !== pages) {\n          dispatch(setTotalPages(pages));\n        }\n      } catch (e) {\n        dispatch(showAlert({ isError: true }));\n      }\n    };\n    updateTaskList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page, sorting, direction]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className={styles.taskContainer}>\n        <TaskTable />\n        <TaskPagination />\n      </div>\n      {loginWindowOpen && <LoginForm />}\n      {taskEditWindowOpen && <TaskForm />}\n      {errorWindowOpen && <AlertPopup />}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import loginReducer from \"./login\";\nimport taskEditReducer from \"./taskEdit\";\nimport taskListReducer from \"./taskList\";\nimport alertReducer from \"./alert\";\n\nexport default {\n  loginReducer,\n  taskEditReducer,\n  taskListReducer,\n  alertReducer,\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: true,\n});\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}